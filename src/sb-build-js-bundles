#!/usr/bin/env node
var config = require('./utils/get-config')();
var PathsExist = require('./utils/paths-exist');
var path = require('path');
var GetPath = require('./utils/get-path');
var fs = require('fs');
var shelljs = require('shelljs');
var exec = require('./utils/exec');
var log = require('./utils/log');
var Promise = require('bluebird');
var Watch = require('./utils/watch');

var streamToPromise = require('stream-to-promise');
var browserify = require('browserify');
var rollupify = require('rollupify');
var babelify = require('babelify');
var shim = require('browserify-shim');
var webpack = Promise.promisify(require('webpack'));
var shimConf = require('../config/shim.config.js');

var es5 = function(bundler) {
  return [
    '/**',
    ' * ' + bundler + ' test ',
    ' */',
    'var pkg = require("' + path.join('..', '..', path.relative(config.path, config.main)) + '");',
    '',
    'QUnit.module("' + bundler + ' require");',
    'QUnit.test("' + config.name + ' should be requireable via ' + bundler + '", function(assert) {',
    '  assert.ok(pkg, "' + config.name + ' is required properly");',
    '});',
  ].join('\n');
};
var es6 = function(bundler) {
  return [
    '/**',
    ' * ' + bundler + ' test ',
    ' */',
    'import pkg from "' + path.join('..', '..', path.relative(config.path, config.jsNextMain)) + '";',
    '',
    'QUnit.module("' + bundler + ' require");',
    'QUnit.test("' + config.name + ' should be requireable via ' + bundler + '", (assert) => {',
    '  assert.ok(pkg, "' + config.name + ' is required properly");',
    '});',
  ].join('\n');
};

var CommanderWrapper = require('./utils/commander-wrapper');
var program = CommanderWrapper(function(commander) {
  return commander
    .option('-w, --watch', 'keep the tester running and run as things change');
});

if (!PathsExist(config.main)) {
  exec('sb-build-js-npm');
}

var build = function() {
  program.bundlers = ['rollup', 'webpack', 'browserify'];

  var promises = [];

  log.info('Building...')
  program.bundlers.forEach(function(bundlerName) {
    var srcFile = path.join(config.dist, 'test', bundlerName + '.start.js');
    var distFile = path.join(config.dist, 'test', bundlerName + '.test.js');
    var unitTestContents  = es5(bundlerName);
    var command;

    if (bundlerName === 'browserify') {
      command = function() {
        return streamToPromise(browserify([srcFile], {
            debug: true,
            transform: [
              [shim, {global: true}]
            ]
          }).external('qunitjs').external('video.js').external('qunit').bundle().pipe(fs.createWriteStream(distFile))
        );
      };
    } else if (bundlerName === 'rollup') {
      // rollup only works on es6
      unitTestContents = es6(bundlerName);
      command = function() {
        return streamToPromise(browserify([srcFile], {
            debug: true,
            transform: [
              [shim, {global: true}],
              rollupify,
              [babelify, {presets: GetPath('babel-preset.config.js')}]
            ],
          }).bundle().pipe(fs.createWriteStream(distFile))
        );
      };
    } else if (bundlerName === 'webpack') {
      command = function() {
        var externals = {};

        Object.keys(shimConf).forEach(function(k) {
          externals[k] = shimConf[k].exports.replace('global:', '');
        });

        return webpack({
          context: config.path,
          entry: srcFile,
          devtool: 'inline-source-map',
          externals: externals,
          output: {
            filename: path.basename(distFile),
            path: path.dirname(distFile)
          },
        });
      };
    }

    shelljs.mkdir('-p', path.dirname(srcFile));
    shelljs.mkdir('-p', path.dirname(distFile));

    var cleanup = function() {
      log.debug('removing srcFile ' + srcFile);
      shelljs.rm('-f', srcFile);
    };
    fs.writeFileSync(srcFile, unitTestContents);
    promises.push(command().then(cleanup).catch(cleanup));
  });

  Promise.all(promises).then(function() {
    program.bundlers.forEach(function(bundlerName) {
      log.info('Wrote bundle test ' + path.join(config.dist, 'test', bundlerName + '.test.js'));
    });
  });
};

if (program.watch) {
  Watch(path.join(config.dist, 'npm', '**', '*.js'), build);
} else {
  build();
}
