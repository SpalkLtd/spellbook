#!/usr/bin/env node
var config = require('./utils/get-config')();
var PathExists = require('./utils/path-exists');
var path = require('path');
var GetPath = require('./utils/get-path');
var RunCommand = require('./utils/run-command');
var fs = require('fs');
var shelljs = require('shelljs');

var program = require('commander')
  .version(config.spellbookVersion)
  .arguments('[bundlers...]')
  .action(function(bundlers) {
    this.bundlers = bundlers;
  })
  .option('-w, --watch', 'keep the tester running and run as things change')
  .parse(process.argv);

var bundlers = ['rollup', 'webpack', 'browserify'];

if (program.bundlers) {
  bundlers = [];
} else {
  program.bundlers = [];
}

if (!PathExists(config.main)) {
  RunCommand('exec', GetPath('sb-build-js-npm'));
}

program.bundlers.forEach(function(bundler) {
  if ((/webpack|browserify|rollup/i).test(environment)) {
    bundlers.push(bundler);
  } else {
    console.error('invalid bundler ' + bundler);
    process.exit(1);
  }
});

if (!PathExists(config.main)) {
  RunCommand('exec', GetPath('sb-build-js-npm'));
}

var commands = [];
var testCache = path.join(config.cache, 'bundles');
var babelPreset = config.ie8 ? GetPath('babel-preset-ie8.config.js') : GetPath('babel-preset.config.js');

RunCommand('rm', '-rf', testCache);
RunCommand('mkdir', '-p', testCache);

bundlers.forEach(function(bundler) {
  var testFile = path.join(testCache, bundler + '.test.js');
  var baseFile = path.join(testCache, bundler + '.start.js');
  var unitTestContents  = [
    "var pkg = require('" + path.join('..', '..', path.relative(config.path, config.main)) + "');",
    "",
    "QUnit.module('" + bundler + " require');",
    "QUnit.test('" + config.name + " should be requireable via " + bundler + "', function(assert) {",
    "  assert.ok(pkg, '" + config.name + " is required properly');",
    "});",
    ""
  ];


  if (bundler === 'browserify') {
    commands.push(GetPath('browserify')
      + ' ' + baseFile
      + ' -x qunitjs'
      + ' -o ' + testFile
    );
  } else if (bundler === 'rollup') {
    // rollup only works on es6
    unitTestContents = [
      "import pkg from '" + path.join('..', '..', path.relative(config.path, config.jsNextMain)) + "';",
      "",
      "QUnit.module('" + bundler + " require');",
      "QUnit.test('" + config.name + " should be requireable via " + bundler + "', (assert) => {",
      "  assert.ok(pkg, '" + config.name + " is required properly');",
      "});",
    ];
    commands.push(GetPath('browserify')
      + ' ' + baseFile
      + ' -t rollupify'
      + ' -x qunitjs'
      + ' -t [ babelify --presets '  + babelPreset + ' ]'
      + ' -o ' + testFile
    );
  } else if (bundler === 'webpack') {
    commands.push(GetPath('webpack')
      + ' ' + baseFile
      + ' --output-filename ' + testFile
    );
  }

  fs.writeFileSync(baseFile, unitTestContents.join('\n'));
});

commands.forEach(function(command) {
  // to silence webpack
  console.log(command);
  var retval = RunCommand('exec', command, function(code, stdout, stderr) {
    if (code !== 0 || stderr.length > 0) {
      console.log('failed!');
      console.log(stdout);
      console.error(stderr);
      process.exit(1);
    }
  });
});
